// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package AddService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdderCatalogClient is the client API for AdderCatalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdderCatalogClient interface {
	AddItemToCatalog(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Ok, error)
	DeleteItemFromCatalog(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ok, error)
}

type adderCatalogClient struct {
	cc grpc.ClientConnInterface
}

func NewAdderCatalogClient(cc grpc.ClientConnInterface) AdderCatalogClient {
	return &adderCatalogClient{cc}
}

func (c *adderCatalogClient) AddItemToCatalog(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/AddService.AdderCatalog/AddItemToCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adderCatalogClient) DeleteItemFromCatalog(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/AddService.AdderCatalog/DeleteItemFromCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdderCatalogServer is the server API for AdderCatalog service.
// All implementations must embed UnimplementedAdderCatalogServer
// for forward compatibility
type AdderCatalogServer interface {
	AddItemToCatalog(context.Context, *Item) (*Ok, error)
	DeleteItemFromCatalog(context.Context, *Id) (*Ok, error)
	mustEmbedUnimplementedAdderCatalogServer()
}

// UnimplementedAdderCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedAdderCatalogServer struct {
}

func (UnimplementedAdderCatalogServer) AddItemToCatalog(context.Context, *Item) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemToCatalog not implemented")
}
func (UnimplementedAdderCatalogServer) DeleteItemFromCatalog(context.Context, *Id) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemFromCatalog not implemented")
}
func (UnimplementedAdderCatalogServer) mustEmbedUnimplementedAdderCatalogServer() {}

// UnsafeAdderCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdderCatalogServer will
// result in compilation errors.
type UnsafeAdderCatalogServer interface {
	mustEmbedUnimplementedAdderCatalogServer()
}

func RegisterAdderCatalogServer(s grpc.ServiceRegistrar, srv AdderCatalogServer) {
	s.RegisterService(&AdderCatalog_ServiceDesc, srv)
}

func _AdderCatalog_AddItemToCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdderCatalogServer).AddItemToCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AddService.AdderCatalog/AddItemToCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdderCatalogServer).AddItemToCatalog(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdderCatalog_DeleteItemFromCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdderCatalogServer).DeleteItemFromCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AddService.AdderCatalog/DeleteItemFromCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdderCatalogServer).DeleteItemFromCatalog(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// AdderCatalog_ServiceDesc is the grpc.ServiceDesc for AdderCatalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdderCatalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AddService.AdderCatalog",
	HandlerType: (*AdderCatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItemToCatalog",
			Handler:    _AdderCatalog_AddItemToCatalog_Handler,
		},
		{
			MethodName: "DeleteItemFromCatalog",
			Handler:    _AdderCatalog_DeleteItemFromCatalog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AdderCatalogService/proto/adderCatalog.proto",
}
