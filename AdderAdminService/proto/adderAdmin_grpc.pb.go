// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package adderAdmin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdderAdminClient is the client API for AdderAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdderAdminClient interface {
	AddAdmin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ok, error)
	DeleteAdmin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ok, error)
}

type adderAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdderAdminClient(cc grpc.ClientConnInterface) AdderAdminClient {
	return &adderAdminClient{cc}
}

func (c *adderAdminClient) AddAdmin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/adderAdmin.AdderAdmin/AddAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adderAdminClient) DeleteAdmin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/adderAdmin.AdderAdmin/DeleteAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdderAdminServer is the server API for AdderAdmin service.
// All implementations must embed UnimplementedAdderAdminServer
// for forward compatibility
type AdderAdminServer interface {
	AddAdmin(context.Context, *Id) (*Ok, error)
	DeleteAdmin(context.Context, *Id) (*Ok, error)
	mustEmbedUnimplementedAdderAdminServer()
}

// UnimplementedAdderAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdderAdminServer struct {
}

func (UnimplementedAdderAdminServer) AddAdmin(context.Context, *Id) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdmin not implemented")
}
func (UnimplementedAdderAdminServer) DeleteAdmin(context.Context, *Id) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (UnimplementedAdderAdminServer) mustEmbedUnimplementedAdderAdminServer() {}

// UnsafeAdderAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdderAdminServer will
// result in compilation errors.
type UnsafeAdderAdminServer interface {
	mustEmbedUnimplementedAdderAdminServer()
}

func RegisterAdderAdminServer(s grpc.ServiceRegistrar, srv AdderAdminServer) {
	s.RegisterService(&AdderAdmin_ServiceDesc, srv)
}

func _AdderAdmin_AddAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdderAdminServer).AddAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adderAdmin.AdderAdmin/AddAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdderAdminServer).AddAdmin(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdderAdmin_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdderAdminServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adderAdmin.AdderAdmin/DeleteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdderAdminServer).DeleteAdmin(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// AdderAdmin_ServiceDesc is the grpc.ServiceDesc for AdderAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdderAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adderAdmin.AdderAdmin",
	HandlerType: (*AdderAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAdmin",
			Handler:    _AdderAdmin_AddAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _AdderAdmin_DeleteAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AdderAdminService/proto/adderAdmin.proto",
}
